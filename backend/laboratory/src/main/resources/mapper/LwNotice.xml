<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zj.laboratory.mapper.LwNoticeMapper">

    <resultMap id="BaseResultMap" type="com.zj.laboratory.pojo.LwNotice">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="role" property="role"/>
        <result column="notice_title" property="noticeTitle"/>
        <result column="notice_content" property="noticeContent"/>
        <result column="notice_type" property="noticeType"/>
        <result column="created_by" property="createdBy"/>
        <result column="created_time" property="createdTime"/>
        <result column="deleted" property="deleted"/>
        <result column="isLook" property="isLook"/>
    </resultMap>
    <select id="getByPage" resultMap="BaseResultMap">
        select id,
               user_id,
               role,
               notice_title,
               notice_content,
               created_by,
               created_time,
               deleted,
               isLook
        from lw_notice
        where deleted = 0
          and role = #{params.role}
          and user_id = #{params.userId}
        order by isLook desc
        limit #{index}, #{pageSize}
    </select>
    <select id="countByPage" resultType="java.lang.Integer">
        select count(*)
        from lw_notice
        where deleted = 0
          and role = #{params.role}
          and user_id = #{params.userId}
    </select>
    <select id="get" resultMap="BaseResultMap">
        select id,
               user_id,
               role,
               notice_title,
               notice_content,
               created_by,
               created_time,
               deleted,
               isLook
        from lw_notice
        where deleted = 0
          and user_id = #{params.userId}
    </select>

    <insert id="save">
        insert into lw_notice(id, user_id, role, notice_title, notice_content, created_by, created_time)
            value (#{id}, #{userId}, #{role}, #{noticeTitle}, #{noticeContent}, #{createdBy}, #{createdTime})
    </insert>
    <update id="delete">
        update lw_notice
        set deleted=1
        where id = #{id}
    </update>
    <update id="look">
        update lw_notice
        set look=1
        where id = #{id}
    </update>
    <select id="getTopNoticeList" resultMap="BaseResultMap">
        select id, user_id, notice_title, notice_content from lw_notice
        where deleted=0 and isLook=0 and role=#{params.role}
        <if test="noticeType">
            and notice_type=#{params.noticeType}
        </if>
        order by created_time
    </select>
    <insert id="saveBatch">
        insert into lw_notice(id, user_id, notice_type, role, notice_title, notice_content, created_by)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{id}, #{userId}, #{role}, #{noticeTitle}, #{noticeContent}, #{createdBy})
        </foreach>
    </insert>
</mapper>